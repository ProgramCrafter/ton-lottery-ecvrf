{-
  TON Instant Lottery
  ton.fun | lotto.ton

  authors:
  1. Raiymbek Kapishev | raiym
        created the first version contract with a bug | https://github.com/raiym/astonished

  2. Andrew Gutarev    | pyAndr3w
        hacked the first version contract and create new version (this) | https://github.com/pyAndr3w/ton-instant-lottery-smc

  3. Prajjawal Khandelwal | Prajjawalk
        added ecvrf integration for random number generation | https://github.com/Prajjawalk/ton-lottery-ecvrf
-}

int workchains_equal?(slice addr1, slice addr2) asm "REWRITESTDADDR DROP SWAP REWRITESTDADDR DROP EQUAL";
int slices_equal?(slice s1, slice s2) asm "SDEQ";
int my_tons() asm "BALANCE" "FIRST";

cell remove_old_orders(cell orders, int o_seqno) {
  int cursor = o_seqno - 20;
  do {
    (cursor, slice order, int f) = orders.udict_get_prev?(64, cursor);
    if (f) {
      orders~udict_delete_get?(64, cursor);
    }
  } until (~ f)
  return orders;
}

_ pack_state(int o_seqno, int n_wins, int in_amount, int out_amount, slice owner, slice ecvrf, slice player, int random_locked, int player_coins, cell orders) inline {
  return begin_cell()             ;; FIRST CELL
    .store_uint(o_seqno, 64)      ;; 64 bit  | order seqno
    .store_uint(n_wins, 64)       ;; 64 bit  | number of wins
    .store_uint(in_amount, 256)   ;; 256 bit | ingoing amount
    .store_uint(out_amount, 256)  ;; 256 bit | outgoing amount
    .store_uint(random_locked, 1) ;; 1 bit  | bool random_locked
    .store_dict(orders)           ;; bit+ref | last orders dict
    .store_ref(
      begin_cell()                ;; SECOND CELL:
        .store_slice(owner)      ;; 267 bit | owner 
        .store_slice(ecvrf)        ;; 267 bit | ecvrf coordinator contract
        .store_slice(player)      ;; 267 bit | current player
        .store_coins(player_coins)
        .end_cell())
    .end_cell();
}

_ unpack_state() inline {
  var ds = get_data().begin_parse();
  slice stats = ds~load_bits(640 + 1);
  cell orders = ds~load_dict();
  slice adrs = ds.preload_ref().begin_parse();
  var unpacked = (stats, orders, adrs~load_msg_addr(), adrs~load_msg_addr(), adrs~load_msg_addr(), adrs~load_coins());
  return unpacked;
}

_ unpack_stats(slice stats) inline {
  var unpacked = (stats~load_uint(64), stats~load_uint(64), stats~load_uint(256), stats~load_uint(256), stats~load_uint(1));
  return unpacked;
}

_ pack_order(int id, int status, int timestamp, int amount, slice address) inline {
  return begin_cell()
    .store_uint(id, 64)
    .store_uint(status, 4)
    .store_uint(timestamp, 64)
    .store_coins(amount)
    .store_slice(address);
}

_ unpack_order(slice order) inline_ref {
    return (order~load_uint(64), order~load_uint(4), order~load_uint(64), order~load_coins(), order~load_msg_addr());
}

() send_tons(slice address, int amount, int mode) impure inline {
  builder msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
  send_raw_message(msg.end_cell(), mode);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  int op = in_msg_body~load_uint(32);
  slice cs = in_msg_full.begin_parse();

  int flags = cs~load_uint(4);
  if (flags & 1) { ;; ignore all bounced messages
      return ();
  }

  (slice stats, cell orders, slice owner, slice ecvrf, slice player, int player_coins) = unpack_state();
  slice sender = cs~load_msg_addr();

  if (slices_equal?(sender, owner)) {
    ;; owners can only deposit
    return ();
  }

  ;; new random number received from vrf
  if (op == 0x069CECA8) {
    if(slices_equal?(sender, ecvrf) == 0) {
      return ();
    }

    if player_coins == 0 {
      return ();
    }

    int vrfrand = in_msg_body~load_uint(256);
    (int o_seqno, int n_wins, int in_amount, int out_amount, int random_locked) = unpack_stats(stats);
    int rand_no = vrfrand % 10;

    if (rand_no >= 4) {
      builder order = pack_order(o_seqno, 3, now(), player_coins, player);
      orders~udict_set_builder(64, o_seqno, order);
      in_amount += player_coins;
      if (player_coins > 3000000000) {
          send_tons(owner, player_coins / 6, 3);
      }
    } else {
      builder order = pack_order(o_seqno, 2, now(), player_coins, player);
      orders~udict_set_builder(64, o_seqno, order);

      in_amount += player_coins;
      out_amount += player_coins * 2;
      n_wins += 1;

      send_tons(player, 2 * player_coins, 3);
    }
    random_locked = 1;
    set_data(pack_state(o_seqno, n_wins, in_amount, out_amount, owner, ecvrf, player, random_locked, 0, orders));
    return ();
  }

  (int o_seqno, int n_wins, int in_amount, int out_amount, int random_locked) = unpack_stats(stats);
  (slice new_player, int o_amount) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins());

  if (random_locked == 0) {
    send_tons(new_player, o_amount, 2);
    return ();
  }

  ;; lottery inactive if balance < 2 stake + 1 TON
  if (my_tons() < o_amount * 2 + 1000000000) {
      send_tons(new_player, o_amount, 2);
      return ();
  }

  ;; min stake 1 TON
  throw_unless(333, msg_value > 999999999);

  ;; lottery active if balance > 2 stake + 1 TON
  throw_unless(666, my_tons() > o_amount * 2 + 1000000000);
  
  ;; subscribe to ecvrf 
  send_raw_message(
    begin_cell()
    .store_uint(0x18, 6)
    .store_slice(ecvrf)
    .store_coins(610000)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0xAB4C4859, 32)
    .store_slice(my_address())
    .end_cell(),
    1
  );

  orders = remove_old_orders(orders, o_seqno);
  o_seqno += 1;

  random_locked = 0;
  set_data(pack_state(o_seqno, n_wins, in_amount, out_amount, owner, ecvrf, new_player, random_locked, o_amount, orders));
  
  return();
}

;; ========== GET-METHODS FOR OLD SOFTWARE ==========

tuple order_tuple(int id, int status, int timestamp, int amount, int wc, int addr_hash) asm(id status timestamp amount wc addr_hash) "6 TUPLE";

int get_order_seqno() method_id {
  (slice stats, _, _, _, _, _) = unpack_state();
  (int o_seqno, _, _, _, _) = unpack_stats(stats);
  return o_seqno;
}

int get_number_of_wins() method_id {
  (slice stats, _, _, _, _, _) = unpack_state();
  (_, int n_wins, _, _, _) = unpack_stats(stats);
  return n_wins;
}

int get_incoming_amount() method_id {
  (slice stats, _, _, _, _, _) = unpack_state();
  (_, _, int in_amount, _, _) = unpack_stats(stats);
  return in_amount;
}

int get_outgoing_amount() method_id {
  (slice stats, _, _, _, _, _) = unpack_state();
  (_, _, _, int out_amount, _) = unpack_stats(stats);
  return out_amount;
}

var get_orders() method_id {
  (_, cell orders, _, _, _, _) = unpack_state();
  int cursor = 0x7fffffff;
  var l = nil;
  do {
    (cursor, var order, int f) = orders.udict_get_prev?(64, cursor);
    if (f) {
      (int id, int status, int timestamp, int amount, slice address) = unpack_order(order);
      (int wc, int addr_hash) = address.parse_std_addr();
      l = cons(order_tuple(id, status, timestamp, amount, wc, addr_hash), l);
    }
  } until (~ f)
  return l;
}

int balance() method_id {
    return my_tons();
}
