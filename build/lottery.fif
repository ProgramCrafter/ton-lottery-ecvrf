"Asm.fif" include
// automatically generated from `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/error_codes.func` `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/math.func` `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/stdlib.func` `/Users/prajjawalkhandelwal/Prajjawal/ton-lottery-ecvrf/func/code.func` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC remove_old_orders
  DECLPROC pack_state
  DECLPROC unpack_state
  DECLPROC unpack_stats
  DECLPROC pack_order
  DECLPROC unpack_order
  DECLPROC send_tons
  DECLPROC recv_internal
  113333 DECLMETHOD get_order_seqno
  80328 DECLMETHOD get_number_of_wins
  109088 DECLMETHOD get_incoming_amount
  113619 DECLMETHOD get_outgoing_amount
  67442 DECLMETHOD get_orders
  104128 DECLMETHOD balance
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  remove_old_orders PROC:<{
    //  orders o_seqno
    -20 ADDCONST	//  orders cursor
    UNTIL:<{
      OVER
      64 PUSHINT	//  orders cursor orders _7=64
      DICTUGETPREV
      NULLSWAPIFNOT2	//  orders _14 _13 _15
      s2 POP	//  orders f cursor
      OVER	//  orders f cursor f
      IF:<{	//  orders f cursor
        s0 s2 PUXC
        64 PUSHINT	//  cursor f cursor orders _10=64
        DICTUDELGET
        NULLSWAPIFNOT	//  cursor f _18 _19 _20
        2DROP	//  cursor f orders
        s0 s2 XCHG	//  orders f cursor
      }>	//  orders f cursor
      SWAP	//  orders cursor f
      NOT	//  orders cursor _12
    }>	//  orders cursor
    DROP	//  orders
  }>
  pack_state PROCINLINE:<{
    //  o_seqno n_wins in_amount out_amount owner ecvrf player random_locked player_coins orders
    NEWC	//  o_seqno n_wins in_amount out_amount owner ecvrf player random_locked player_coins orders _10
    s0 s6 XCHG2	//  o_seqno n_wins in_amount out_amount orders ecvrf player random_locked player_coins _10 owner
    STSLICER	//  o_seqno n_wins in_amount out_amount orders ecvrf player random_locked player_coins _11
    s0 s4 XCHG2	//  o_seqno n_wins in_amount out_amount orders player_coins player random_locked _11 ecvrf
    STSLICER	//  o_seqno n_wins in_amount out_amount orders player_coins player random_locked _12
    ROT	//  o_seqno n_wins in_amount out_amount orders player_coins random_locked _12 player
    STSLICER	//  o_seqno n_wins in_amount out_amount orders player_coins random_locked _13
    ROT	//  o_seqno n_wins in_amount out_amount orders random_locked _13 player_coins
    STVARUINT16	//  o_seqno n_wins in_amount out_amount orders random_locked _14
    ENDC	//  o_seqno n_wins in_amount out_amount orders random_locked _15
    s0 s6 XCHG
    NEWC	//  _15 n_wins in_amount out_amount orders random_locked o_seqno _16
    64 STU	//  _15 n_wins in_amount out_amount orders random_locked _18
    s1 s5 XCHG	//  _15 random_locked in_amount out_amount orders n_wins _18
    64 STU	//  _15 random_locked in_amount out_amount orders _20
    s1 s3 XCHG	//  _15 random_locked orders out_amount in_amount _20
    256 STU	//  _15 random_locked orders out_amount _22
    256 STU	//  _15 random_locked orders _24
    s1 s2 XCHG	//  _15 orders random_locked _24
    1 STU	//  _15 orders _26
    STDICT	//  _15 _27
    STREF	//  _28
    ENDC	//  _29
  }>
  unpack_state PROCINLINE:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    641 PUSHINT	//  ds _7
    LDSLICEX	//  stats ds
    LDDICT	//  stats orders ds
    PLDREF	//  stats orders _13
    CTOS	//  stats orders adrs
    LDMSGADDR	//  stats orders _16 adrs
    LDMSGADDR	//  stats orders _16 _18 adrs
    LDMSGADDR	//  stats orders _16 _18 _20 adrs
    LDVARUINT16	//  stats orders _16 _18 _20 _41 _40
    DROP	//  unpacked unpacked unpacked unpacked unpacked unpacked
  }>
  unpack_stats PROCINLINE:<{
    //  stats
    64 LDU	//  _2 stats
    64 LDU	//  _2 _5 stats
    256 LDU	//  _2 _5 _8 stats
    256 LDU	//  _2 _5 _8 _11 stats
    1 LDU	//  _2 _5 _8 _11 _31 _30
    DROP	//  unpacked unpacked unpacked unpacked unpacked
  }>
  pack_order PROCINLINE:<{
    //  id status timestamp amount address
    s0 s4 XCHG
    NEWC	//  address status timestamp amount id _5
    64 STU	//  address status timestamp amount _7
    s1 s3 XCHG	//  address amount timestamp status _7
    4 STU	//  address amount timestamp _9
    64 STU	//  address amount _11
    SWAP	//  address _11 amount
    STVARUINT16	//  address _12
    SWAP	//  _12 address
    STSLICER	//  _13
  }>
  unpack_order PROCREF:<{
    //  order
    64 LDU	//  _1 order
    4 LDU	//  _1 _4 order
    64 LDU	//  _1 _4 _7 order
    LDVARUINT16	//  _1 _4 _7 _10 order
    LDMSGADDR	//  _1 _4 _7 _10 _23 _22
    DROP	//  _1 _4 _7 _10 _12
  }>
  send_tons PROCINLINE:<{
    //  address amount mode
    0 PUSHINT	//  address amount mode _4=0
    24 PUSHINT	//  address amount mode _4=0 _5=24
    NEWC	//  address amount mode _4=0 _5=24 _6
    6 STU	//  address amount mode _4=0 _8
    s0 s4 XCHG2	//  _4=0 amount mode _8 address
    STSLICER	//  _4=0 amount mode _9
    ROT	//  _4=0 mode _9 amount
    STVARUINT16	//  _4=0 mode _10
    s1 s2 XCHG	//  mode _4=0 _10
    107 STU	//  mode msg
    ENDC	//  mode _25
    SWAP	//  _25 mode
    SENDRAWMSG
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_full in_msg_body
    32 LDU	//  msg_value in_msg_full op in_msg_body
    s0 s2 XCHG	//  msg_value in_msg_body op in_msg_full
    CTOS	//  msg_value in_msg_body op cs
    4 LDU	//  msg_value in_msg_body op flags cs
    SWAP
    1 PUSHINT	//  msg_value in_msg_body op cs flags _13=1
    AND	//  msg_value in_msg_body op cs _14
    IFJMP:<{	//  msg_value in_msg_body op cs
      4 BLKDROP	// 
    }>	//  msg_value in_msg_body op cs
    unpack_state INLINECALLDICT	//  msg_value in_msg_body op cs stats orders owner ecvrf player player_coins
    s0 s6 XCHG	//  msg_value in_msg_body op player_coins stats orders owner ecvrf player cs
    LDMSGADDR	//  msg_value in_msg_body op player_coins stats orders owner ecvrf player _166 _165
    DROP	//  msg_value in_msg_body op player_coins stats orders owner ecvrf player sender
    s0 s3 PUSH2	//  msg_value in_msg_body op player_coins stats orders owner ecvrf player sender sender owner
    SDEQ	//  msg_value in_msg_body op player_coins stats orders owner ecvrf player sender _25
    IFJMP:<{	//  msg_value in_msg_body op player_coins stats orders owner ecvrf player sender
      10 BLKDROP	// 
    }>	//  msg_value in_msg_body op player_coins stats orders owner ecvrf player sender
    s0 s7 XCHG
    110947496 PUSHINT	//  msg_value in_msg_body sender player_coins stats orders owner ecvrf player op _26=110947496
    EQUAL	//  msg_value in_msg_body sender player_coins stats orders owner ecvrf player _27
    IFJMP:<{	//  msg_value in_msg_body sender player_coins stats orders owner ecvrf player
      s8 POP	//  player in_msg_body sender player_coins stats orders owner ecvrf
      s5 s5 XCPU	//  player in_msg_body ecvrf player_coins stats orders owner sender ecvrf
      SDEQ	//  player in_msg_body ecvrf player_coins stats orders owner _28
      0 EQINT	//  player in_msg_body ecvrf player_coins stats orders owner _30
      IFJMP:<{	//  player in_msg_body ecvrf player_coins stats orders owner
        7 BLKDROP	// 
      }>	//  player in_msg_body ecvrf player_coins stats orders owner
      s3 PUSH	//  player in_msg_body ecvrf player_coins stats orders owner player_coins
      0 EQINT	//  player in_msg_body ecvrf player_coins stats orders owner _32
      IFJMP:<{	//  player in_msg_body ecvrf player_coins stats orders owner
        7 BLKDROP	// 
      }>	//  player in_msg_body ecvrf player_coins stats orders owner
      s0 s5 XCHG	//  player owner ecvrf player_coins stats orders in_msg_body
      256 LDU	//  player owner ecvrf player_coins stats orders _168 _167
      DROP	//  player owner ecvrf player_coins stats orders vrfrand
      s0 s2 XCHG	//  player owner ecvrf player_coins vrfrand orders stats
      unpack_stats INLINECALLDICT	//  player owner ecvrf player_coins vrfrand orders _169 _170 _171 _172 _173
      DROP	//  player owner ecvrf player_coins vrfrand orders o_seqno n_wins in_amount out_amount
      s0 s5 XCHG
      10 PUSHINT	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount vrfrand _44=10
      MOD	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount rand_no
      3 GTINT	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount _47
      IF:<{	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount
        s2 PUSH
        3 PUSHINT
        NOW
        s8 s11 PUSH2	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount o_seqno _49=3 _50 player_coins player
        pack_order INLINECALLDICT	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount order
        s0 s3 s4 XCPUXC
        64 PUSHINT	//  player owner ecvrf player_coins out_amount in_amount o_seqno n_wins order o_seqno orders _53=64
        DICTUSETB	//  player owner ecvrf player_coins out_amount in_amount o_seqno n_wins orders
        s3 s5 XCPU	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount player_coins
        ADD	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount
        s5 PUSH
        3000000000 PUSHINT	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount player_coins _56=3000000000
        GREATER	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount _57
        IF:<{	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount
          s0 s5 XCHG
          6 PUSHINT	//  player owner ecvrf in_amount out_amount orders o_seqno n_wins player_coins _58=6
          DIV	//  player owner ecvrf in_amount out_amount orders o_seqno n_wins _59
          s7 s(-1) PUXC
          3 PUSHINT	//  player owner ecvrf in_amount out_amount orders o_seqno n_wins owner _59 _60=3
          send_tons INLINECALLDICT
        }>ELSE<{
          s5 POP	//  player owner ecvrf in_amount out_amount orders o_seqno n_wins
        }>
      }>ELSE<{	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount
        s2 PUSH
        2 PUSHINT
        NOW
        s8 s11 PUSH2	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount o_seqno _63=2 _64 player_coins player
        pack_order INLINECALLDICT	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount order
        s0 s3 s4 XCPUXC
        64 PUSHINT	//  player owner ecvrf player_coins out_amount in_amount o_seqno n_wins order o_seqno orders _67=64
        DICTUSETB	//  player owner ecvrf player_coins out_amount in_amount o_seqno n_wins orders
        s3 s5 XCPU	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount player_coins
        ADD	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount
        s5 PUSH	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount player_coins
        1 LSHIFT#	//  player owner ecvrf player_coins out_amount orders o_seqno n_wins in_amount _71
        s1 s5 XCHG	//  player owner ecvrf player_coins in_amount orders o_seqno n_wins out_amount _71
        ADD	//  player owner ecvrf player_coins in_amount orders o_seqno n_wins out_amount
        SWAP	//  player owner ecvrf player_coins in_amount orders o_seqno out_amount n_wins
        INC	//  player owner ecvrf player_coins in_amount orders o_seqno out_amount n_wins
        s0 s5 XCHG	//  player owner ecvrf n_wins in_amount orders o_seqno out_amount player_coins
        1 LSHIFT#	//  player owner ecvrf n_wins in_amount orders o_seqno out_amount _76
        s8 s(-1) PUXC
        3 PUSHINT	//  player owner ecvrf n_wins in_amount orders o_seqno out_amount player _76 _77=3
        send_tons INLINECALLDICT
        s0 s3 XCHG
        s0 s4 XCHG	//  player owner ecvrf in_amount out_amount orders o_seqno n_wins
      }>
      s7 s6 XCHG2
      s4 s5 XCHG
      s0 s3 XCHG
      s0 s4 XCHG
      1 PUSHINT
      s0 s3 XCHG2
      0 PUSHINT
      SWAP	//  o_seqno n_wins in_amount out_amount owner ecvrf player random_locked=1 _80=0 orders
      pack_state INLINECALLDICT	//  _81
      c4 POP
    }>	//  msg_value in_msg_body sender player_coins stats orders owner ecvrf player
    DROP
    s4 POP
    s4 POP	//  msg_value in_msg_body owner ecvrf stats orders
    SWAP	//  msg_value in_msg_body owner ecvrf orders stats
    unpack_stats INLINECALLDICT	//  msg_value in_msg_body owner ecvrf orders o_seqno n_wins in_amount out_amount random_locked
    s0 s8 XCHG	//  msg_value random_locked owner ecvrf orders o_seqno n_wins in_amount out_amount in_msg_body
    LDMSGADDR	//  msg_value random_locked owner ecvrf orders o_seqno n_wins in_amount out_amount _91 in_msg_body
    LDVARUINT16	//  msg_value random_locked owner ecvrf orders o_seqno n_wins in_amount out_amount _91 _182 _181
    DROP	//  msg_value random_locked owner ecvrf orders o_seqno n_wins in_amount out_amount new_player o_amount
    s0 s9 XCHG	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player random_locked
    0 EQINT	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player _96
    IFJMP:<{	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player
      s9 POP
      7 BLKDROP	//  new_player o_amount
      2 PUSHINT	//  new_player o_amount _97=2
      send_tons INLINECALLDICT
    }>	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player
    BALANCE
    FIRST	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player _99
    s9 PUSH	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player _99 o_amount
    1 LSHIFT#	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player _99 _101
    1000000000 PUSHINT	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player _99 _101 _102=1000000000
    ADD	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player _99 _103
    LESS	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player _104
    IFJMP:<{	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player
      s9 POP
      7 BLKDROP	//  new_player o_amount
      2 PUSHINT	//  new_player o_amount _105=2
      send_tons INLINECALLDICT
    }>	//  msg_value o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount new_player
    s0 s9 XCHG
    999999999 PUSHINT	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount msg_value _108=999999999
    GREATER	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _109
    333 THROWIFNOT
    BALANCE
    FIRST	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _112
    s8 PUSH	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _112 o_amount
    1 LSHIFT#	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _112 _114
    1000000000 PUSHINT	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _112 _114 _115=1000000000
    ADD	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _112 _116
    GREATER	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _117
    666 THROWIFNOT
    2873903193 PUSHINT	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193
    0 PUSHINT	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0
    24 PUSHINT	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0 _121=24
    NEWC	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0 _121=24 _122
    6 STU	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0 _124
    s8 PUSH	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0 _124 ecvrf
    STSLICER	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0 _125
    610000 PUSHINT	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0 _125 _126=610000
    STVARUINT16	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _120=0 _127
    107 STU	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _119=2873903193 _141
    32 STU	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _143
    MYADDR	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _143 _144
    STSLICER	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _145
    ENDC	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _146
    1 PUSHINT	//  new_player o_amount owner ecvrf orders o_seqno n_wins in_amount out_amount _146 _147=1
    SENDRAWMSG
    s4 s3 XCPU	//  new_player o_amount owner ecvrf out_amount o_seqno n_wins in_amount orders o_seqno
    remove_old_orders CALLDICT	//  new_player o_amount owner ecvrf out_amount o_seqno n_wins in_amount orders
    s0 s3 XCHG	//  new_player o_amount owner ecvrf out_amount orders n_wins in_amount o_seqno
    INC	//  new_player o_amount owner ecvrf out_amount orders n_wins in_amount o_seqno
    s7 s1 s8 XCHG3
    s6 s2 XCHG2
    s1 s4 XCHG
    s1 s5 XCHG
    s1 s3 XCHG
    0 PUSHINT
    s0 s2 XCHG	//  o_seqno n_wins in_amount out_amount owner ecvrf new_player random_locked=0 o_amount orders
    pack_state INLINECALLDICT	//  _153
    c4 POP
  }>
  get_order_seqno PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16 _17 _18
    5 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _19 _20 _21 _22 _23
    4 BLKDROP	//  o_seqno
  }>
  get_number_of_wins PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16 _17 _18
    5 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _19 _20 _21 _22 _23
    s3 s4 XCHG
    4 BLKDROP	//  n_wins
  }>
  get_incoming_amount PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16 _17 _18
    5 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _19 _20 _21 _22 _23
    s2 s4 XCHG
    4 BLKDROP	//  in_amount
  }>
  get_outgoing_amount PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16 _17 _18
    5 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _19 _20 _21 _22 _23
    s1 s4 XCHG
    4 BLKDROP	//  out_amount
  }>
  get_orders PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _27 _28 _29 _30 _31 _32
    s4 s5 XCHG
    5 BLKDROP	//  orders
    31 PUSHPOW2DEC	//  orders cursor=2147483647
    PUSHNULL	//  orders cursor=2147483647 l
    UNTIL:<{
      s1 s2 XCPU
      64 PUSHINT	//  orders l cursor orders _13=64
      DICTUGETPREV
      NULLSWAPIFNOT2	//  orders l order cursor f
      DUP	//  orders l order cursor f f
      IF:<{	//  orders l order cursor f
        s0 s2 XCHG	//  orders l f cursor order
        unpack_order INLINECALLDICT	//  orders l f cursor id status timestamp amount address
        REWRITESTDADDR	//  orders l f cursor id status timestamp amount wc addr_hash
        6 TUPLE	//  orders l f cursor _24
        s0 s3 XCHG2	//  orders cursor f _24 l
        CONS	//  orders cursor f l
        s0 s2 XCHG	//  orders l f cursor
      }>ELSE<{
        s2 POP	//  orders l f cursor
      }>
      SWAP	//  orders l cursor f
      NOT	//  orders l cursor _26
      s1 s2 XCHG	//  orders cursor l _26
    }>	//  orders cursor l
    2 1 BLKDROP2	//  l
  }>
  balance PROC:<{
    // 
    BALANCE
    FIRST	//  _0
  }>
}END>c

boc>B "build/boc/lottery.boc" B>file